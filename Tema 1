Ejercicios
Ciclo de vida del software

Define "Ciclo de vida del software".

El ciclo de vida del desarrollo del software (también conocido como SDLC o Systems Development Life Cycle) contempla las fases necesarias para validar el desarrollo del software y así garantizar que este cumpla los requisitos para la aplicación y verificación de los procedimientos de desarrollo, asegurándose de que los métodos usados son apropiados.

Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas.

Planificación
Antes de empezar un proyecto de desarrollo de un sistema de información, es necesario hacer ciertas tareas que influirán decisivamente en el éxito del mismo. Dichas tareas son conocidas como el fuzzy front-end del proyecto, puesto que no están sujetas a plazos.
Algunas de las tareas de esta fase incluyen actividades como la determinación del ámbito del proyecto, la realización de un estudio de viabilidad, el análisis de los riesgos asociados, la estimación del coste del proyecto, su planificación temporal y la asignación de recursos a las diferentes etapas del proyecto.
Análisis
Por supuesto, hay que averiguar qué es exactamente lo que tiene que hacer el software. Por eso, la etapa de análisis en el ciclo de vida del software corresponde al proceso a través del cual se intenta descubrir qué es lo que realmente se necesita y se llega a una comprensión adecuada de los requerimientos del sistema (las características que el sistema debe poseer).
Diseño
En esta fase se estudian posibles opciones de implementación para el software que hay que construir, así como decidir la estructura general del mismo. El diseño es una etapa compleja y su proceso debe realizarse de manera iterativa.
Es posible que la solución inicial no sea la más adecuada, por lo que en tal caso hay que refinarla. No obstante, hay catálogos de patrones de diseño muy útiles que recogen errores que otros han cometido para no caer en la misma trampa.
Implementación
En esta fase hay que elegir las herramientas adecuadas, un entorno de desarrollo que facilite el trabajo y un lenguaje de programación apropiado para el tipo de software a construir. Esta elección dependerá tanto de las decisiones de diseño tomadas como del entorno en el que el software deba funcionar.
Al programar, hay que intentar que el código no sea indescifrable siguiendo distintas pautas como las siguientes:
Evitar bloques de control no estructurados.
Identificar correctamente las variables y su alcance.
Elegir algoritmos y estructuras de datos adecuadas para el problema.
Mantener la lógica de la aplicación lo más sencilla posible.
Documentar y comentar adecuadamente el código de los programas.
Facilitar la interpretación visual del código utilizando reglas de formato de código previamente consensuadas en el equipo de desarrollo.
También hay que tener en cuenta la adquisición de recursos necesarios para que el software funcione, además de desarrollar casos de prueba para comprobar el funcionamiento del mismo según se vaya programando.
Pruebas
Como errar es humano, la fase de pruebas del ciclo de vida del software busca detectar los fallos cometidos en las etapas anteriores para corregirlos. Por supuesto, lo ideal es hacerlo antes de que el usuario final se los encuentre. Se dice que una prueba es un éxito si se detecta algún error.
Instalación o despliegue
La siguiente fase es poner el software en funcionamiento, por lo que hay que planificar el entorno teniendo en cuenta las dependencias existentes entre los diferentes componentes del mismo.
Es posible que haya componentes que funcionen correctamente por separado, pero que al combinarlos provoquen problemas. Por ello, hay que usar combinaciones conocidas que no causen problemas de compatibilidad.
Uso y mantenimiento
Esta es una de las fases más importantes del ciclo de vida de desarrollo del software. Puesto que el software ni se rompe ni se desgasta con el uso, su mantenimiento incluye tres puntos diferenciados:
Eliminar los defectos detectados durante su vida útil (mantenimiento correctivo).
Adaptarlo a nuevas necesidades (mantenimiento adaptativo).
Añadirle nuevas funcionalidades (mantenimiento perfectivo).
Aunque suene contradictorio, cuanto mejor es el software más tiempo hay que invertir en su mantenimiento. La principal razón es que se usará más (incluso de formas que no se habían previsto) y, por ende, habrá más propuestas de mejoras.


Explica brevemente en qué consiste el modelo en cascada cuando hablamos de desarrollo de software.

En el modelo de ciclo de vida en cascada las fases anteriores funcionarán una detrás de la otra de manera lineal. De este modo, sólo cuando una fase termine se podrá continuar con la siguiente, y así progresivamente.

 Ventajas e inconvenientes del modelo en cascada.


Ventajas
Inconvenientes
✔ Una estructura sencilla gracias a unas fases de proyecto claramente diferenciadas.
✘ Por norma general, los proyectos más complejos o de varios niveles no permiten su división en fases de proyecto claramente diferenciadas.
✔ Buena documentación del proceso de desarrollo a través de unos hitos bien definidos.
✘ Poco margen para realizar ajustes a lo largo del proyecto debido a un cambio en las exigencias.
✔ Los costes y la carga de trabajo se pueden estimar al comenzar el proyecto.
✘El usuario final no se integra en el proceso de producción hasta que no termina la programación.
✔ Aquellos proyectos que se estructuran en base al modelo en cascada se pueden representar cronológicamente de forma sencilla.
✘En ocasiones, los fallos solo se detectan una vez finalizado el proceso de desarrollo.



 ¿Qué se entiende por verificación? ¿Y por validación?

Conjunto de procesos de comprobación y análisis que aseguran que el software que se desarrolla está acorde a su especificación y cumple las necesidades de los clientes.

 Explica cómo funciona el modelo de desarrollo mediante creación de prototipos.

    El diseño rápido se centra en una representación de aquellos aspectos del software que serán visibles para el cliente o el usuario final. Este diseño conduce a la construcción de un prototipo, el cual es evaluado por el cliente para una retroalimentación; gracias a esta se refinan los requisitos del software que se desarrollará. La interacción ocurre cuando el prototipo se ajusta para satisfacer las necesidades del cliente. Esto permite que al mismo tiempo el desarrollador entienda mejor lo que se debe hacer y el cliente vea resultados a corto plazo.

 ¿Qué cuatro principios rigen el desarrollo ágil expresados en el Manifiesto Ágil?

Será necesario valorar más a las personas y sus interacciones que a herramientas y procesos.
Aporta más valor el software en funcionamiento que la documentación exhaustiva
Uno de los valores principales será la relación con el cliente, que será más importante que cualquier cláusula reflejada en el contrato
Es necesario adaptarse a diferentes circunstancias antes que seguir un plan rígido


 ¿Qué es una historia de usuario? Consulta el siguiente enlace:
        https://es.wikipedia.org/wiki/Historias_de_usuario
Una historia de usuario es una representación de un requisito escrito en una o dos frases utilizando el lenguaje común del usuario.
    
SCRUM. Explica como funciona Scrum. Consulta los siguientes enlaces:
        https://proyectosagiles.org/que-es-scrum/
        https://proyectosagiles.org/como-funciona-scrum/
Scrum es un proceso en el que se aplican de manera regular un conjunto de buenas prácticas para trabajar colaborativamente, en equipo, y obtener el mejor resultado posible de un proyecto. Estas prácticas se apoyan unas a otras y su selección tiene origen en un estudio de la manera de trabajar de equipos altamente productivos.
En Scrum se realizan entregas parciales y regulares del producto final, priorizadas por el beneficio que aportan al receptor del proyecto. Por ello, Scrum está especialmente indicado para proyectos en entornos complejos, donde se necesita obtener resultados pronto, donde los requisitos son cambiantes o poco definidos, donde la innovación, la competitividad, la flexibilidad y la productividad son fundamentales.
Scrum también se utiliza para resolver situaciones en que no se está entregando al cliente lo que necesita, cuando las entregas se alargan demasiado, los costes se disparan o la calidad no es aceptable, cuando se necesita capacidad de reacción ante la competencia, cuando la moral de los equipos es baja y la rotación alta, cuando es necesario identificar y solucionar ineficiencias sistemáticamente o cuando se quiere trabajar utilizando un proceso especializado en el desarrollo de producto.


SCRUM. Define los siguientes términos:
        Product backlog: El product backlog (o pila de producto) es un listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto.
        Sprint backlog: Del Sprint Backlog es una planificación táctica del trabajo a realizar en la iteración actual.

SCRUM. En la terminología Scrum qué términos se utilizan como sinónimo de:
        Jefe de proyecto. Scrum project
        Cliente. Product owner
        Equipo de desarrollo. Development team

SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum. Consulta el siguiente enlace:
        https://proyectosagiles.org/requisitos-de-scrum/
Los siguientes puntos son de especial importancia para la implantación de una gestión ágil de proyectos como Scrum:
Cultura de empresa basada en trabajo en equipo, delegación, creatividad y mejora continua.
Compromiso del cliente en la dirección de los resultados del proyecto, gestión del ROI y disponibilidad para poder colaborar.
Compromiso de la Dirección de la organización para resolver problemas endémicos y realizar cambios organizativos, formando equipos autogestionados y multidisciplinares y fomentando una cultura de gestión basada en la colaboración y en la facilitación llevada a cabo por líderes al servicio del equipo.
Compromiso conjunto y colaboración de los miembros del equipo.
Relación entre proveedor y cliente basada en ganar-ganar, colaboración y transparencia.
Facilidad para realizar cambios en el proyecto.
Tamaño de cada equipo entre 5 y 9 personas (con técnicas específicas de planificación y coordinación cuando varios equipos trabajan en el mismo proyecto).
Equipo trabajando en un mismo espacio común para maximizar la comunicación.
Dedicación del equipo a tiempo completo.
Estabilidad de los miembros del equipo.
